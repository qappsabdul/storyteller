<div class="card">
    <div class="card-header">
        <h2>File Upload</h2>
    </div>
    <div class="card-body">
        <p>Upload and manage your files securely.</p>
        
        <form id="fileUploadForm" enctype="multipart/form-data">
            <div class="mb-3">
                <label for="file" class="form-label">Select File</label>
                <input class="form-control" type="file" id="file" name="file" required>
                <div class="form-text">Max file size: 10MB</div>
            </div>
            
            <div class="mb-3">
                <label for="description" class="form-label">Description (optional)</label>
                <textarea class="form-control" id="description" name="description" rows="2"></textarea>
            </div>
            
            <button type="submit" class="btn btn-primary">
                Upload File
            </button>
        </form>
        
        <div class="mt-5">
            <h3>Your Uploads</h3>
            <div id="uploadsList" class="mt-3">
                <div class="text-center" id="loadingUploads">
                    <div class="spinner-border spinner-border-sm" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span>Loading your files...</span>
                </div>
                <div id="noUploadsMessage" style="display:none;">
                    <p>You haven't uploaded any files yet.</p>
                </div>
                <div id="uploadsTable" style="display:none;">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>File</th>
                                <th>Size</th>
                                <th>Uploaded</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="uploadsTableBody">
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const fileUploadForm = document.getElementById('fileUploadForm');
    const loadingUploads = document.getElementById('loadingUploads');
    const noUploadsMessage = document.getElementById('noUploadsMessage');
    const uploadsTable = document.getElementById('uploadsTable');
    const uploadsTableBody = document.getElementById('uploadsTableBody');
    
    // Load user's uploaded files
    const loadUploads = async () => {
        try {
            const response = await fetch('/api/uploads');
            const data = await response.json();
            
            loadingUploads.style.display = 'none';
            
            if (data.success && data.files && data.files.length > 0) {
                uploadsTable.style.display = 'block';
                
                // Clear existing rows
                uploadsTableBody.innerHTML = '';
                
                // Add file rows
                data.files.forEach(file => {
                    const row = document.createElement('tr');
                    
                    // Format file size
                    let fileSize = file.size;
                    let sizeUnit = 'B';
                    if (fileSize > 1024) {
                        fileSize = (fileSize / 1024).toFixed(1);
                        sizeUnit = 'KB';
                    }
                    if (fileSize > 1024) {
                        fileSize = (fileSize / 1024).toFixed(1);
                        sizeUnit = 'MB';
                    }
                    
                    // Format date
                    const uploadDate = new Date(file.createdAt).toLocaleDateString();
                    
                    row.innerHTML = `
                        <td>
                            <a href="/uploads/${file.filename}" target="_blank">${file.originalName}</a>
                            ${file.description ? `<p class="small text-muted">${file.description}</p>` : ''}
                        </td>
                        <td>${fileSize} ${sizeUnit}</td>
                        <td>${uploadDate}</td>
                        <td>
                            <button class="btn btn-sm btn-danger delete-file" data-id="${file.id}">Delete</button>
                        </td>
                    `;
                    
                    uploadsTableBody.appendChild(row);
                });
                
                // Add delete handlers
                document.querySelectorAll('.delete-file').forEach(button => {
                    button.addEventListener('click', deleteFile);
                });
            } else {
                noUploadsMessage.style.display = 'block';
            }
        } catch (error) {
            loadingUploads.style.display = 'none';
            noUploadsMessage.textContent = `Error loading files: ${error.message || 'Unknown error'}`;
            noUploadsMessage.style.display = 'block';
        }
    };
    
    // Delete file
    const deleteFile = async (event) => {
        const fileId = event.target.dataset.id;
        if (!confirm('Are you sure you want to delete this file?')) {
            return;
        }
        
        try {
            const response = await fetch(`/api/uploads/${fileId}`, {
                method: 'DELETE'
            });
            
            const data = await response.json();
            
            if (data.success) {
                // Reload uploads
                loadUploads();
            } else {
                alert(`Error: ${data.error || 'Failed to delete file'}`);
            }
        } catch (error) {
            alert(`Error: ${error.message || 'Failed to connect to server'}`);
        }
    };
    
    // Handle form submission
    fileUploadForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        
        const formData = new FormData();
        formData.append('file', document.getElementById('file').files[0]);
        
        const description = document.getElementById('description').value;
        if (description) {
            formData.append('description', description);
        }
        
        const submitButton = fileUploadForm.querySelector('button[type="submit"]');
        submitButton.disabled = true;
        submitButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Uploading...';
        
        try {
            const response = await fetch('/api/uploads', {
                method: 'POST',
                body: formData
            });
            
            const data = await response.json();
            
            if (data.success) {
                // Reset form
                fileUploadForm.reset();
                
                // Show success message
                const successAlert = document.createElement('div');
                successAlert.className = 'alert alert-success mt-3';
                successAlert.textContent = 'File uploaded successfully!';
                fileUploadForm.appendChild(successAlert);
                
                // Hide message after 3 seconds
                setTimeout(() => {
                    fileUploadForm.removeChild(successAlert);
                }, 3000);
                
                // Reload uploads list
                loadUploads();
            } else {
                alert(`Error: ${data.error || 'Failed to upload file'}`);
            }
        } catch (error) {
            alert(`Error: ${error.message || 'Failed to connect to server'}`);
        } finally {
            // Reset button
            submitButton.disabled = false;
            submitButton.textContent = 'Upload File';
        }
    });
    
    // Load uploads on page load
    loadUploads();
});
</script>